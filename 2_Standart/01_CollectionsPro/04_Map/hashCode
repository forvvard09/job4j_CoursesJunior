Хорошая хеш функция для неравных объектов стремиться генерировать различные хэш-коды.

Вот рецеппт по книге Д.Блоха "Эффективное программирование", в дальнейшей практике буду придерживаться именно этого правила.

1. Присовйте переменной int result некоторое ненулевое число, например 17.
2. Для каждого значимого поля f в объекте (т.е. поля "важные" поля п нашей бизнесс логике, значения которого применяются в расчет методом equals)
необходимо сделать вот это:
 1 вычислить для этого поля хэш-код (тип int);
  * если поле имеет типа boolean, вычислить (f? 1: 0);
  * если поле имеет типа byte, char, short или int, вычислить: (int) f;
  * если поле имеет тип long вычислите (int)(f - (f > > > 32));
  * eсли поле имеет тип float, вычислите Float. floatтoIntBits(f).
  * если - тип double, вычислите Double. doubleToLongBits(f), а затем преобразуйте полученное значение, как указано выше;
  * если поле является ссылкой на объект, а метод equals данного класса сравнивает это поле, рекурсивно вызывая другие методы equals,
  так же рекурсивно вызывать для этого поля метод hashCode. Если требуется более сложное сравнение, вычислить для данного поля каноническое
  представление (canonical representation), а затем вызовить для него метод hashCode. Если значение поля равно null, возвращать О (можно любую
  другую константу, но традиционно используется О);
  * если поле является массивом, обрабатываеть его так, как если бы каждый его элемент был отдельным полем. Иными словами, вычислить хэш-код для
  каждого значимого элемента, рекурсивно применяя данные правила, а затем объедините полученные значения так, как описано выше;

 2 Объединить хэш-код с, вычисленный на этапе 1, с текущим значением поля resul t
   следующим образом: result = 37*result + с;

 Пример:

 Допустим у нас есть клас Figure:

 Figure {
   String name;
   byte  length;
   byte width;
   int size;
   boolean fond;
   String color;

  По нашей бизнес логике важным полями являются поля: name, length, width, size, fond. Эти поля используются в методе equals.


  Тогда метод hashCode будет выгядить так:

   @Override
      public int hashCode() {
      int result = 17;
          result = 37*result + name.hashCode();
          result = 37*result + (int)length;
          result = 37*result + (int)width;
          result = 37*result + size;
          result = 37*result + (fond ? 0 : 1);
      return result;
      }














