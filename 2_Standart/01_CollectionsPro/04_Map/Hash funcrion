Согласно википедии:
Хэширование или хеширование (англ. hashing) — преобразование массива входных данных произвольной длины в (выходную) битовую строку фиксированной длины, выполняемое определённым алгоритмом. Функция, реализующая алгоритм и выполняющая преобразование, называется «хеш-функцией» или «функцией свёртки». Исходные данные называются входным массивом, «ключом» или «сообщением». Результат преобразования (выходные данные) называется «хешем», «хеш-кодом», «хеш-суммой», «сводкой сообщения».

Существуют некоторые спецификации, которых должна придерживаться hash-функция:
  * если во время работы приложения несколько раз запросить хеш-код одного объекты одной и той же
  функцией, то должно возврщаться одно и тоже число, однако если изменить обхект или запустить приложение зановов
  это число может быть другим.
  * равные объекты должны иметь равный хеш-код

По большому счету это числовое представление объекта. В java 7 оно было реализована на по-битовых ствигах.
Но у этой реализации есть недостатки: во-первых, последовательно выделяемые объекты будут иметь последовательные хеш-коды; во-вторых, сборщик мусора может передвигать объекты в памяти, меняя их адреса.
В Java 8 - это нативный код, т.е код который анписан на других языках, в данном случае на С++
В некоторых статьях пишут, что при первом вызове hashCode(дефолтный метод для получения хеш-кода объекта) реализован на генерации случайного 
числа, после чего сохраняется в заголовке объекта для последующих вызовов.

Но, в HotSpot можно выбирать реализацию Object.hashCode с помощью ключа командной строки -XX:hashCode=n (где n от 0 до 5).
  0 – Park-Miller RNG (по умолчанию)
  1 – f(адрес, глобальное_состояние)
  2 – константа 1
  3 – последовательный счетчик
  4 – адрес объекта
  5 – Thread-local Xorshift

Если алгоритм хеш функции плохо спроектирован, то у разных объектов будет один хеш-код, что повличет за собой коллизии, а это скорость доступа 
к объектам.



