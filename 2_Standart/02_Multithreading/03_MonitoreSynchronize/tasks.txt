task_2_02_03_01:
Задание.
1. Сделать класс многопоточный счетчик Count#int incremant().
2. Подключить библиотеку jcip-annotations

https://mvnrepository.com/artifact/net.jcip/jcip-annotations/1.0

Для этого добавить в блок dependencies следующий код.

<dependency>
    <groupId>net.jcip</groupId>
    <artifactId>jcip-annotations</artifactId>
    <version>1.0</version>
</dependency>

3. В заголовке класса указать аннотацию @ThreadSafe

4. Для поля состояния использовать аннотацию @GuardedBy

5. В аннотации GuardedBy - указать объект монитора.

task_2_02_03_02:
1. Создать класс - структуру данных для хранение пользователей UserStorage.
2. В заголовке класса обозначить аннотацию @ThreadSafe из библиотеки

<dependency>
    <groupId>net.jcip</groupId>
    <artifactId>jcip-annotations</artifactId>
    <version>1.0</version>
</dependency>

3. Хранилище должно иметь методы boolean add (User user), boolean update(User user), boolean delete(User user).

4. И особый метод transfer(int fromId, int toId, int amount);

5. Структура данных должна быть потокобезопасная;

6. В структуре User Должны быть поля int id, int amount.

amount - это сумма денег на счете пользователя.

Пример. использования.

UserStore stoge = new UserStore();

stoge.add(new User(1, 100));
stoge.add(new User(2, 200));

stoge.transfer(1, 2, 50);

task_2_02_03_03:
Модифицируйте коллекции из заданий
 5.3.1. Создать динамический список на базе массива. [#158] и
 5.3.2. Создать контейнер на базе связанного списка [#159],
сделав их потокобезопасными.
В обязательном порядке используйте jcip аннотации.

task_2_02_03_04:
1. Нужно осуществлять обход файловой системы и поиск заданного текста в файловой системе.

public class ParallerSearch(String root, String text, List<String> exts) {
}

,где
root - путь до папки откуда надо осуществлять поиск.
text - заданных текст.
exts - расширения файлов в которых нужно делать поиск.

Приложения должно искать текст в файлах (в том числе и в подкаталогах) и сохранять адрес файла.

List<String> result(); - возвращает список всех файлов.

Логика приложения.

1. Запустить код.
2. Внутри запустить несколько потоков. Объяснить для чего нужно делать потоки.
3. Дождаться завершения поиска.
4. Вывести на консоль результат.