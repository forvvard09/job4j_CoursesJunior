В этом задании описаны задачи, вам необходимо объяснить в каком случае эффективней использовать ArrayList, а в каких LinkedList и почему.

Код писать не надо.

Задача 1. В текстовом файле находится отсортированный по фамилии список сотрудников. При запуске программы данный список должен загружаться в List<String>. Программа должна выводить на экран либо список всех сотрудников, либо выводить частями по 50 сотрудников по порядку.

Задача 2. Пришёл начальник и сказал, что после загрузки из файла в List-е слишком много дубликатов, нужно добавить функцию удалять все дубликаты из List-а после загрузки файла.

Задача 3. Если бы у вас была возможность использовать не только листы, какую коллекцию вы бы предпочли.

Решение 1.
Тут как мы видим нужно прочитать весь файл или грубо говоря "читать по 50". Добавлять, удалять и изменять ничего не требуется.
ArrayList: Быстрый доступ к элементам по индексу за время O(1);
LinledList: Получение по индекс потребуется линейное время O(n), можно организовать очередь или стек, время доступа O(1);

Следовательно, если бы нам нужно было читать файл целиком, то можно было бы использовать как ArrayList так и LinkedList.
Но если нужно выводить по 50, тогда для быстроты лучше использовать ArrayList, из-за его скорости к доступу по индексу O(1),
по сравнению с LinkedList O(n).

Решение 2.
Тут нам потребуется удалять элементы из самого списка, если исходить из много дубликатов, то верным будет использование
LinkedList из расчета, что придется удалять из "середины списка", а удаление из середины списка намного быстрее выполняется
в LinkedList, потому что он из себя представляет двунаправленный список, и при удлаении не придется затрачивать время на пересоздание списка,
которое было бы нужно, если бы мы использовали ArayList.

Решение 3.
Тут все логично, необходимо использовать коллекцию, которая не может содержать дубликатов.
Для этого подойдет реализация интерфейса SET. Для задачи бы я выбрал реализацию коллеекцию TreeSet.
 TreSet - коллекция, которая хранит свои элементы в виде упорядоченного по значениям дерева.
 TreeSet хорош тем, что для операций add, remove и contains потребуется гарантированное время log(n).







